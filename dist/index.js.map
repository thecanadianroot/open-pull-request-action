{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://open-pull-request-action/external node-commonjs \"fs\"","../webpack://open-pull-request-action/webpack/bootstrap","../webpack://open-pull-request-action/webpack/runtime/compat","../webpack://open-pull-request-action/./lib/main.js"],"sourcesContent":["module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require('fs');\nconst files = fs.readdirSync('.github/', { withFileTypes: true });\nconsole.log();\n// async function run(): Promise<void> {\n//     try {\n//         const token: string | undefined = core.getInput('token', {required: true});\n//         const base: string | undefined = core.getInput('base', {required: true});\n//         const head: string | undefined = core.getInput('head', {required: true});\n//         const title: string | undefined = core.getInput('title', {required: true});\n//         const body: string | undefined = core.getInput('body', {required: false}) || process.env.BODY;\n//         const baseSHA: string | undefined = core.getInput('base-sha', {required: false}) || process.env.BASE_SHA;\n//         const headSHA: string | undefined = core.getInput('head-sha', {required: false}) || process.env.HEAD_SHA;\n//         const assignees: string[] | undefined = core.getMultilineInput('assignees', {required: false}) || process.env.ASSIGNEES;\n//         const labels: string[] | undefined = core.getMultilineInput('labels', {required: false}) || process.env.LABELS;\n//         const reviewers: string[] | undefined = core.getMultilineInput('reviewers', {required: false}) || process.env.REVIEWERS;\n//         const teamReviewers: string[] | undefined = core.getMultilineInput('team-reviewers', {required: false}) || process.env.TEAM_REVIEWERS;\n//         const merge: boolean = core.getBooleanInput('merge', {required: false}) || false;\n//         let repo: string = core.getInput('repository', {required: false}) || process.env.REPOSITORY || github.context.repo.repo;\n//         let owner = core.getInput('owner', {required: false}) || process.env.OWNER || github.context.repo.owner;\n//         if (repo.includes('/')){\n//             let split = repo.split('/');\n//             owner = split[0];\n//             repo = split[1];\n//         }\n//\n//         if (!token || !base || !head || !title) {\n//             core.setFailed(`'token', 'base', 'head' and 'title' inputs are required!`);\n//             return;\n//         }\n//\n//         const octokit = github.getOctokit(token);\n//\n//         async function createBranch(name: string, sha: string | undefined, ref: string) {\n//             if (sha) {\n//                 const branch = await octokit.rest.git.createRef({\n//                     owner,\n//                     repo,\n//                     ref: `refs/heads/${ref}`,\n//                     sha\n//                 }).catch((reason) => {\n//                     core.setFailed(`Couldn't create ${name} branch: ${reason}`);\n//                     process.exit(1);\n//                 });\n//                 core.info(`Created ${name} branch '${ref}' from SHA '${sha}': https://github.com/${owner}/${repo}/tree/${ref}`)\n//                 core.setOutput(`${name}-branch`, branch.data);\n//             }\n//         }\n//\n//         await createBranch('base', baseSHA, base);\n//         await createBranch('head', headSHA, head);\n//\n//         // Open pull-request from HEAD to BASE\n//         const pr = await octokit.rest.pulls.create({\n//             owner,\n//             repo,\n//             title,\n//             body,\n//             head,\n//             base\n//         }).catch((reason) => {\n//             core.setFailed(`Couldn't open pull-request on ${owner}/${repo}: ${reason}`);\n//             process.exit(1);\n//         });\n//         core.info(`Opened pull-request #${pr.data.number}: ${pr.data.html_url}`)\n//         core.setOutput('pull-request', pr.data);\n//\n//         // Add assignees to pull-request if any\n//         if (assignees?.length > 0) {\n//             await octokit.rest.issues.addAssignees({\n//                 owner,\n//                 repo,\n//                 issue_number: pr.data.number,\n//                 assignees\n//             }).catch((reason) => core.error(`Couldn't add assignees to pull-request #${pr.data.number}: ${reason}`));\n//         }\n//\n//         // Add labels to pull-request if any.\n//         if (labels?.length > 0){\n//             await octokit.rest.issues.addLabels({\n//                 owner,\n//                 repo,\n//                 issue_number: pr.data.number,\n//                 labels\n//             })\n//         }\n//\n//         // Add reviewers to pull-request if any.\n//         if (reviewers?.length > 0 || teamReviewers?.length > 0) {\n//             await octokit.rest.pulls.requestReviewers({\n//                 owner,\n//                 repo,\n//                 pull_number: pr.data.number,\n//                 reviewers: reviewers,\n//                 team_reviewers: teamReviewers\n//             }).catch((reason) => core.error(`Couldn't request reviewers for pull-request #${pr.data.number}: ${reason}`));\n//         }\n//         if (merge) {\n//             await octokit.rest.pulls.merge({\n//                 owner,\n//                 repo,\n//                 pull_number: pr.data.number\n//             })\n//         }\n//     } catch (error) {\n//         if (error instanceof Error) core.setFailed(error.message)\n//     }\n// }\n//\n// run()\n"],"names":[],"sourceRoot":""}